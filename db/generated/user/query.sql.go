// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :exec
WITH
    deleted_session AS (
        DELETE FROM sessions
        WHERE
            user_id = $1
        RETURNING
            id, user_id, access_token, refresh_token
    )
INSERT INTO
    sessions (
        user_id,
        access_token,
        refresh_token
    )
VALUES ($1, $2, $3)
`

type CreateSessionParams struct {
	UserID       pgtype.UUID
	AccessToken  string
	RefreshToken string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.UserID, arg.AccessToken, arg.RefreshToken)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO
    users (username, email, password)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Username pgtype.Text
	Email    string
	Password pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Username, arg.Email, arg.Password)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE user_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password FROM users WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserBySession = `-- name: GetUserBySession :one
SELECT user_id FROM sessions WHERE access_token = $1
`

func (q *Queries) GetUserBySession(ctx context.Context, accessToken string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserBySession, accessToken)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, password FROM users ORDER BY username
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
